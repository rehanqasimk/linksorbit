'use client';

import { useSession } from 'next-auth/react';
import { useState, useEffect } from 'react';
import Link from 'next/link';
import Image from 'next/image';

interface Metric {
  description: string;
  country: string;
  currency: string;
  cpc: number | null;
  cr: number;
  commission: number;
}

interface Program {
  id: string;
  name: string;
  description: string;
  countries: string[];
  url: string;
  domain: string;
  image: string;
  payPerLead: number;
  payPerSale: number;
  currency: string;
  categories: string[];
  metrics: Metric[];
  requestStatus?: 'PENDING' | 'APPROVED' | 'REJECTED' | null;
}

export default function Programs() {
  const { data: session } = useSession();
  const [activeTab, setActiveTab] = useState<'ALL' | 'APPROVED' | 'PENDING' | 'REJECTED'>('ALL');
  const [selectedCategory, setSelectedCategory] = useState<string>('');
  const [selectedCountry, setSelectedCountry] = useState<string>('DE'); // Default to Germany
  const [searchQuery, setSearchQuery] = useState<string>('');
  const [currentPage, setCurrentPage] = useState<number>(1);
  const [pageSize, setPageSize] = useState<number>(10);
  
  const [programs, setPrograms] = useState<Program[]>([]);
  const [totalPrograms, setTotalPrograms] = useState<number>(0);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [joinRequestStatus, setJoinRequestStatus] = useState<{ [key: string]: boolean }>({});
  const [categories, setCategories] = useState<string[]>([]);
  const [countries, setCountries] = useState<string[]>(['DE', 'US', 'UK', 'FR', 'ES', 'IT', 'NL', 'TW']);
  
  useEffect(() => {
    fetchPrograms();
  }, [currentPage, pageSize, selectedCountry, activeTab]);
  
  const fetchPrograms = async () => {
    setLoading(true);
    setError(null);
    
    try {
      const res = await fetch(
        `/api/programs?page=${currentPage}&pageSize=${pageSize}&country=${selectedCountry}`
      );
      
      if (!res.ok) {
        throw new Error('Failed to fetch programs');
      }
      
      const data = await res.json();
      setPrograms(data.advertisers);
      setTotalPrograms(data.total);
      
      // Extract unique categories
      const uniqueCategories = new Set<string>();
      data.advertisers.forEach((program: Program) => {
        if (program.categories && program.categories.length) {
          program.categories.forEach(cat => uniqueCategories.add(cat));
        }
      });
      
      setCategories(Array.from(uniqueCategories));
      
    } catch (err: any) {
      setError(err.message);
      console.error('Error fetching programs:', err);
    } finally {
      setLoading(false);
    }
  };
  
  const handleJoinProgram = async (programId: string) => {
    setJoinRequestStatus(prev => ({ ...prev, [programId]: true }));
    
    try {
      const res = await fetch('/api/programs/request', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ programId }),
      });
      
      if (!res.ok) {
        throw new Error('Failed to submit join request');
      }
      
      // Refresh programs to update status
      fetchPrograms();
    } catch (err: any) {
      setError(err.message);
      console.error('Error joining program:', err);
    } finally {
      setJoinRequestStatus(prev => ({ ...prev, [programId]: false }));
    }
  };
  
  const handleSearch = () => {
    fetchPrograms();
  };
  
  // Filter programs based on active tab and search query
  const filteredPrograms = programs
    .filter(program => {
      if (activeTab === 'ALL') return true;
      if (activeTab === 'APPROVED' && program.requestStatus === 'APPROVED') return true;
      if (activeTab === 'PENDING' && program.requestStatus === 'PENDING') return true;
      if (activeTab === 'REJECTED' && program.requestStatus === 'REJECTED') return true;
      return false;
    })
    .filter(program => {
      if (!searchQuery) return true;
      
      const query = searchQuery.toLowerCase();
      return (
        program.name.toLowerCase().includes(query) ||
        program.description?.toLowerCase().includes(query) ||
        program.categories?.some(cat => cat.toLowerCase().includes(query))
      );
    });
    
  const totalPages = Math.ceil(totalPrograms / pageSize);

  return (
    <div className="min-h-screen bg-gray-900 text-white p-6">
      <div className="max-w-7xl mx-auto space-y-6">
        {/* Header */}
        <div className="flex justify-between items-center">
          <h1 className="text-2xl font-semibold">Programs</h1>
          <nav className="flex space-x-6">
            <Link href="/dashboard" className="text-white hover:text-gray-300">Dashboard</Link>
            <Link href="/programs" className="text-white hover:text-gray-300 font-bold">Programs</Link>
            <Link href="/reports" className="text-white hover:text-gray-300">Reports</Link>
            <Link href="/incentives" className="text-white hover:text-gray-300">Incentives</Link>
          </nav>
        </div>

        {/* Tab Navigation */}
        <div className="border-b border-gray-700">
          <nav className="flex -mb-px">
            <button 
              onClick={() => setActiveTab('ALL')} 
              className={`mr-8 py-4 text-sm font-medium ${
                activeTab === 'ALL' ? 'border-b-2 border-indigo-500 text-indigo-500' : 'text-gray-400 hover:text-gray-300'
              }`}
            >
              Programs (All)
            </button>
            <button 
              onClick={() => setActiveTab('APPROVED')} 
              className={`mr-8 py-4 text-sm font-medium ${
                activeTab === 'APPROVED' ? 'border-b-2 border-indigo-500 text-indigo-500' : 'text-gray-400 hover:text-gray-300'
              }`}
            >
              Approved
            </button>
            <button 
              onClick={() => setActiveTab('PENDING')} 
              className={`mr-8 py-4 text-sm font-medium ${
                activeTab === 'PENDING' ? 'border-b-2 border-indigo-500 text-indigo-500' : 'text-gray-400 hover:text-gray-300'
              }`}
            >
              Pending
            </button>
            <button 
              onClick={() => setActiveTab('REJECTED')} 
              className={`mr-8 py-4 text-sm font-medium ${
                activeTab === 'REJECTED' ? 'border-b-2 border-indigo-500 text-indigo-500' : 'text-gray-400 hover:text-gray-300'
              }`}
            >
              Rejected
            </button>
          </nav>
        </div>

        {/* Filters */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-400 mb-1">Select Category</label>
            <select 
              value={selectedCategory} 
              onChange={(e) => setSelectedCategory(e.target.value)} 
              className="w-full bg-gray-800 border border-gray-700 rounded py-2 px-3 text-white"
            >
              <option value="">All Categories</option>
              {categories.map(category => (
                <option key={category} value={category}>{category}</option>
              ))}
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-400 mb-1">Select Country</label>
            <select 
              value={selectedCountry} 
              onChange={(e) => setSelectedCountry(e.target.value)} 
              className="w-full bg-gray-800 border border-gray-700 rounded py-2 px-3 text-white"
            >
              {countries.map(country => (
                <option key={country} value={country}>{country}</option>
              ))}
            </select>
          </div>
          <div className="flex items-end">
            <button 
              onClick={handleSearch} 
              className="bg-indigo-600 hover:bg-indigo-700 text-white py-2 px-4 rounded"
            >
              SEARCH
            </button>
          </div>
        </div>

        {/* Programs Table */}
        <div className="bg-gray-800 rounded-lg overflow-hidden">
          <div className="flex justify-between items-center p-4 border-b border-gray-700">
            <div className="text-sm text-gray-400">
              {loading ? 'Loading...' : `Showing ${filteredPrograms.length} of ${totalPrograms} programs`}
            </div>
            <input
              type="text"
              placeholder="Keyword Search"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="px-4 py-2 bg-gray-700 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500"
            />
          </div>
          
          {error && (
            <div className="p-4 bg-red-900 text-white text-sm">
              {error}
            </div>
          )}
          
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-700">
              <thead className="bg-gray-700">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                    ID
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                    Logo
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                    Program Name
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                    Country
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                    Categories
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                    Commission
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                    Status
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-gray-800 divide-y divide-gray-700">
                {loading ? (
                  <tr>
                    <td colSpan={8} className="px-6 py-4 text-center text-gray-400">
                      Loading programs...
                    </td>
                  </tr>
                ) : filteredPrograms.length === 0 ? (
                  <tr>
                    <td colSpan={8} className="px-6 py-4 text-center text-gray-400">
                      No programs found
                    </td>
                  </tr>
                ) : (
                  filteredPrograms.map((program) => (
                    <tr key={program.id}>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                        {program.id.substring(0, 8)}...
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="h-10 w-10 rounded-full bg-gray-700 flex items-center justify-center text-sm font-medium overflow-hidden">
                          {program.image ? (
                            <Image 
                              src={program.image} 
                              alt={program.name} 
                              width={40} 
                              height={40} 
                              className="object-cover"
                            />
                          ) : (
                            program.name.substring(0, 2).toUpperCase()
                          )}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                        <a 
                          href={program.url} 
                          target="_blank" 
                          rel="noopener noreferrer" 
                          className="hover:text-indigo-400"
                        >
                          {program.name}
                        </a>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                        {program.countries.join(', ')}
                      </td>
                      <td className="px-6 py-4">
                        <div className="flex flex-wrap gap-1">
                          {program.categories.map((category, idx) => (
                            <span 
                              key={idx} 
                              className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-900 text-blue-200"
                            >
                              {category}
                            </span>
                          ))}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                        {program.payPerSale > 0 ? (
                          <div>{program.payPerSale} {program.currency} / Sale</div>
                        ) : program.payPerLead > 0 ? (
                          <div>{program.payPerLead} {program.currency} / Lead</div>
                        ) : (
                          <div>Commission varies</div>
                        )}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        {program.requestStatus ? (
                          <span 
                            className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                              program.requestStatus === 'APPROVED' ? 'bg-green-900 text-green-200' : 
                              program.requestStatus === 'PENDING' ? 'bg-yellow-900 text-yellow-200' : 
                              'bg-red-900 text-red-200'
                            }`}
                          >
                            {program.requestStatus}
                          </span>
                        ) : (
                          <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-700 text-gray-300">
                            NOT JOINED
                          </span>
                        )}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                        {program.requestStatus ? (
                          program.requestStatus === 'APPROVED' ? (
                            <button
                              className="text-green-400 hover:text-green-300 font-medium"
                              disabled
                            >
                              APPROVED
                            </button>
                          ) : program.requestStatus === 'PENDING' ? (
                            <button
                              className="text-yellow-400 hover:text-yellow-300 font-medium"
                              disabled
                            >
                              PENDING
                            </button>
                          ) : (
                            <button
                              onClick={() => handleJoinProgram(program.id)}
                              className="text-indigo-400 hover:text-indigo-300 font-medium"
                              disabled={joinRequestStatus[program.id]}
                            >
                              {joinRequestStatus[program.id] ? 'JOINING...' : 'JOIN AGAIN'}
                            </button>
                          )
                        ) : (
                          <button
                            onClick={() => handleJoinProgram(program.id)}
                            className="text-indigo-400 hover:text-indigo-300 font-medium"
                            disabled={joinRequestStatus[program.id]}
                          >
                            {joinRequestStatus[program.id] ? 'JOINING...' : 'JOIN'}
                          </button>
                        )}
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>
          
          {/* Pagination */}
          <div className="px-5 py-5 bg-gray-800 border-t border-gray-700 flex flex-wrap items-center justify-between">
            <div className="flex-1 flex justify-between sm:hidden">
              <button 
                onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))} 
                disabled={currentPage === 1 || loading}
                className={`px-4 py-2 border border-gray-700 text-sm font-medium rounded-md text-gray-300 
                  ${currentPage === 1 || loading ? 'bg-gray-800 cursor-not-allowed' : 'bg-gray-700 hover:bg-gray-600'}`}
              >
                Previous
              </button>
              <button 
                onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))} 
                disabled={currentPage === totalPages || loading}
                className={`ml-3 px-4 py-2 border border-gray-700 text-sm font-medium rounded-md text-gray-300 
                  ${currentPage === totalPages || loading ? 'bg-gray-800 cursor-not-allowed' : 'bg-gray-700 hover:bg-gray-600'}`}
              >
                Next
              </button>
            </div>
            <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
              <div>
                <p className="text-sm text-gray-400">
                  Showing <span className="font-medium">{filteredPrograms.length}</span> results of{' '}
                  <span className="font-medium">{totalPrograms}</span> programs
                </p>
              </div>
              <div>
                <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                  <button
                    onClick={() => setCurrentPage(1)}
                    disabled={currentPage === 1 || loading}
                    className={`relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-700 bg-gray-800 text-sm font-medium text-gray-400 
                      ${currentPage === 1 || loading ? 'cursor-not-allowed' : 'hover:bg-gray-700'}`}
                  >
                    <span className="sr-only">First</span>
                    <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                      <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
                    </svg>
                    <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                      <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
                    </svg>
                  </button>
                  <button
                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
                    disabled={currentPage === 1 || loading}
                    className={`relative inline-flex items-center px-2 py-2 border border-gray-700 bg-gray-800 text-sm font-medium text-gray-400 
                      ${currentPage === 1 || loading ? 'cursor-not-allowed' : 'hover:bg-gray-700'}`}
                  >
                    <span className="sr-only">Previous</span>
                    <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                      <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
                    </svg>
                  </button>
                  
                  {/* Page numbers */}
                  {[...Array(Math.min(5, totalPages))].map((_, idx) => {
                    let pageNum;
                    
                    // Show current page and surrounding pages
                    if (totalPages <= 5) {
                      pageNum = idx + 1;
                    } else if (currentPage <= 3) {
                      pageNum = idx + 1;
                    } else if (currentPage >= totalPages - 2) {
                      pageNum = totalPages - 4 + idx;
                    } else {
                      pageNum = currentPage - 2 + idx;
                    }
                    
                    return (
                      <button
                        key={idx}
                        onClick={() => setCurrentPage(pageNum)}
                        disabled={loading}
                        aria-current={currentPage === pageNum ? 'page' : undefined}
                        className={`relative inline-flex items-center px-4 py-2 border border-gray-700 text-sm font-medium
                          ${currentPage === pageNum 
                            ? 'z-10 bg-indigo-700 text-indigo-100 border-indigo-600' 
                            : 'bg-gray-800 text-gray-300 hover:bg-gray-700'
                          } ${loading ? 'cursor-not-allowed' : ''}`}
                      >
                        {pageNum}
                      </button>
                    );
                  })}
                  
                  <button
                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
                    disabled={currentPage === totalPages || loading}
                    className={`relative inline-flex items-center px-2 py-2 border border-gray-700 bg-gray-800 text-sm font-medium text-gray-400 
                      ${currentPage === totalPages || loading ? 'cursor-not-allowed' : 'hover:bg-gray-700'}`}
                  >
                    <span className="sr-only">Next</span>
                    <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                      <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
                    </svg>
                  </button>
                  <button
                    onClick={() => setCurrentPage(totalPages)}
                    disabled={currentPage === totalPages || loading}
                    className={`relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-700 bg-gray-800 text-sm font-medium text-gray-400 
                      ${currentPage === totalPages || loading ? 'cursor-not-allowed' : 'hover:bg-gray-700'}`}
                  >
                    <span className="sr-only">Last</span>
                    <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                      <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
                    </svg>
                    <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                      <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
                    </svg>
                  </button>
                </nav>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
